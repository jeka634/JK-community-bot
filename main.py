import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from db.models import Base, User, Balance, DailyLimit, Setting
import config
from datetime import datetime, timedelta
from bot.ton_client import get_nfts_by_owner, is_veteran, is_legendary
from aiogram import F, Router
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from admin import handlers as admin_handlers
import random
import httpx
from games.dice import create_game_db, get_active_game_by_user, Currency, generate_temp_wallet, get_ton_connect_link, check_payment, finish_game_db
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.deep_linking import create_start_link
from bot.ton_onchain import send_jetton, send_ton

DATABASE_URL = 'sqlite+aiosqlite:///./db/database.db'

engine = create_async_engine(DATABASE_URL, echo=False)
AsyncSessionLocal = async_sessionmaker(engine, expire_on_commit=False)

bot = Bot(token=config.TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher()

router = Router()

async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

def get_main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='üí∞ –ë–∞–ª–∞–Ω—Å'), KeyboardButton(text='üé≤ –ò–≥—Ä—ã')],
            [KeyboardButton(text='üí∏ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏'), KeyboardButton(text='üèÜ NFT-—Å—Ç–∞—Ç—É—Å')],
            [KeyboardButton(text='üë• –†–µ—Ñ–µ—Ä–∞–ª—ã'), KeyboardButton(text='üîó –ö–æ—à–µ–ª—ë–∫')],
            [KeyboardButton(text='üì§ –í—ã–≤–æ–¥'), KeyboardButton(text='‚ÑπÔ∏è –ü–æ–º–æ—â—å')],
        ],
        resize_keyboard=True
    )

@dp.message(CommandStart())
async def start_handler(message: Message):
    async with AsyncSessionLocal() as session:
        user_result = await session.execute(
            select(User).filter_by(telegram_id=str(message.from_user.id))
        )
        user = user_result.scalar_one_or_none()
        if not user:
            user = User(telegram_id=str(message.from_user.id), username=message.from_user.username)
            session.add(user)
            await session.flush()
            if user.id is not None:
                session.add(Balance(user_id=user.id, jk_balance=0))
                session.add(DailyLimit(user_id=user.id, date=datetime.utcnow(), earned_today=0))
            await session.commit()
    welcome = (
        'üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Jekardos coin Community Bot!</b>\n\n'
        '–≠—Ç–æ—Ç –±–æ—Ç ‚Äî —Ü–µ–Ω—Ç—Ä —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ $JK:\n'
        '‚Ä¢ –ü–æ–ª—É—á–∞–π $JK –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ (–æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)\n'
        '‚Ä¢ –ò–≥—Ä–∞–π—Ç–µ –≤ –∫–æ—Å—Ç–∏ –∏ –¥—Ä—É–≥–∏–µ –∏–≥—Ä—ã –Ω–∞ $JK –∏ TON\n'
        '‚Ä¢ P2P-–ø–µ—Ä–µ–≤–æ–¥—ã $JK –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n'
        '‚Ä¢ NFT-—Å—Ç–∞—Ç—É—Å—ã –∏ –±–æ–Ω—É—Å—ã –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤\n'
        '‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n'
        '‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–∞–Ω –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∏ —Ä–∞–∑–±–∞–Ω –∑–∞ $JK\n\n'
        '<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n'
        '/start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
        '/balance ‚Äî –±–∞–ª–∞–Ω—Å\n'
        '/connect_wallet ‚Äî –ø–æ–¥–∫–ª—é—á–∏—Ç—å TON-–∫–æ—à–µ–ª–µ–∫ —á–µ—Ä–µ–∑ TON Connect\n'
        '/check_status ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π NFT-—Å—Ç–∞—Ç—É—Å –∏ –±–æ–Ω—É—Å—ã\n'
        '/send [amount] @username ‚Äî –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ $JK –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n'
        '/dice @username [amount] [currency] ‚Äî –∏–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏ –Ω–∞ $JK –∏–ª–∏ TON\n'
        '/withdraw ‚Äî –≤—ã–≤–µ—Å—Ç–∏ $JK —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞\n'
        '/unban ‚Äî —Ä–∞–∑–±–∞–Ω–∏—Ç—å—Å—è –∑–∞ $JK (–µ—Å–ª–∏ –≤—ã –∑–∞–±–∞–Ω–µ–Ω—ã)\n'
    )
    await message.answer(welcome, reply_markup=get_main_menu())

@dp.message(Command('connect_wallet'))
async def connect_wallet_handler(message: Message):
    tg_id = message.from_user.id
    link = f'{TON_CONNECT_BACKEND}/connect?tg_id={tg_id}'
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–Ø –ø–æ–¥–∫–ª—é—á–∏–ª –∫–æ—à–µ–ª–µ–∫', callback_data='wallet_connected')]
    ])
    await message.reply(f'–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è TON-–∫–æ—à–µ–ª—å–∫–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ TON Space/TONkeeper:\n{link}', reply_markup=kb)

@dp.message(Command('check_status'))
async def check_status_handler(message: Message):
    async with AsyncSessionLocal() as session:
        user_result = await session.execute(
            select(User).filter_by(telegram_id=str(message.from_user.id))
        )
        user = user_result.scalar_one_or_none()

        if not user:
            await message.reply('–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start!')
            return
        if not user.ton_address:
            await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π TON-–∞–¥—Ä–µ—Å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
            return
        nfts = await get_nfts_by_owner(str(user.ton_address))
        veteran = is_veteran(nfts)
        legendary = is_legendary(nfts)
        setattr(user, "is_legendary", bool(legendary))
        setattr(user, "is_veteran", bool(veteran or legendary))
        if legendary:
            await message.reply('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£ –≤–∞—Å –µ—Å—Ç—å –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π NFT –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏. –í–∞–º –ø—Ä–∏—Å–≤–æ–µ–Ω —Å—Ç–∞—Ç—É—Å "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ë—ã–≤–∞–ª—ã–π"!')
        elif veteran:
            await message.reply('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£ –≤–∞—Å –µ—Å—Ç—å NFT –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏. –í–∞–º –ø—Ä–∏—Å–≤–æ–µ–Ω —Å—Ç–∞—Ç—É—Å "–ë—ã–≤–∞–ª—ã–π"!')
        else:
            await message.reply('–£ –≤–∞—Å –Ω–µ—Ç NFT –∏–∑ –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π. –°—Ç–∞—Ç—É—Å "–ë—ã–≤–∞–ª—ã–π" –Ω–µ –ø—Ä–∏—Å–≤–æ–µ–Ω.')
        await session.commit()

@dp.message(Command('dice'))
async def dice_game_handler(message: Message):
    if not message.text:
        await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
        return
    args = message.text.split()
    if len(args) != 4:
        await message.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /dice @opponent [amount] [currency], –Ω–∞–ø—Ä–∏–º–µ—Ä: /dice @username 1000 TON')
        return
    _, opponent_username, amount_str, currency_str = args
    if not opponent_username.startswith('@'):
        await message.reply('–£–∫–∞–∂–∏—Ç–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ @username')
        return
    try:
        amount = int(amount_str)
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.reply('–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.')
        return
    currency = currency_str.upper()
    if currency not in ('TON', '$JK'):
        await message.reply('–í–∞–ª—é—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å TON –∏–ª–∏ $JK.')
        return
    async with AsyncSessionLocal() as session:
        opponent_result = await session.execute(
            select(User).filter_by(username=opponent_username.lstrip('@'))
        )
        opponent = opponent_result.scalar_one_or_none()
        if not opponent:
            await message.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ.')
            return
        if opponent.telegram_id == str(message.from_user.id):
            await message.reply('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å —Å–∞–º–∏ —Å —Å–æ–±–æ–π!')
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
        active_game = await get_active_game_by_user(session, message.from_user.id)
        if active_game:
            await message.reply('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–µ–π –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –µ—ë –∫–æ–º–∞–Ω–¥–æ–π /reset_game.')
            return
        opponent_active_game = await get_active_game_by_user(session, int(opponent.telegram_id))
        if opponent_active_game:
            await message.reply('–£ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –µ—ë –∫–æ–º–∞–Ω–¥–æ–π /reset_game.')
            return
        # –°–æ–∑–¥–∞—ë–º –∏–≥—Ä—É –≤ –ë–î
        game = await create_game_db(session, message.from_user.id, int(opponent.telegram_id), amount, Currency(currency))
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='Accept challenge', callback_data=f'accept_dice_{game.initiator_id}')]
        ])
        await message.reply(f'@{opponent_username.lstrip("@")}! You are challenged to a dice game for {amount} {currency}. To participate, click the button below.', reply_markup=kb)

@dp.message(Command('reset_game'))
async def reset_game_handler(message: Message):
    async with AsyncSessionLocal() as session:
        game = await get_active_game_by_user(session, message.from_user.id)
        if not game:
            await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.')
            return
        await finish_game_db(session, game)
        await message.reply('–í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É.')

@dp.message()
async def message_handler(message: Message):
    # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.text and message.text.startswith('/'):
        return
    if not message.from_user or not message.text:
        return
    text = message.text.strip()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –º–µ–Ω–µ–µ 5 —Å–ª–æ–≤
    words = text.split()
    if len(words) < 5:
        return
    def is_meaningless(word):
        return len(word) > 4 and (len(set(word.lower())) / len(word)) > 0.6
    if all(is_meaningless(w) for w in words):
        return
    if random.random() > 0.1:
        return
    async with AsyncSessionLocal() as session:
        user_result = await session.execute(
            select(User).options(selectinload(User.balance), selectinload(User.daily_limit)).filter_by(telegram_id=str(message.from_user.id))
        )
        user = user_result.scalar_one_or_none()
        if not user or user.banned:
            return
        daily = user.daily_limit
        now = datetime.utcnow()
        if not daily or daily.date.date() != now.date():
            if daily:
                daily.date = now
                daily.earned_today = 0
            else:
                daily = DailyLimit(user_id=user.id, date=now, earned_today=0)
                session.add(daily)
        if daily.earned_today >= config.DAILY_JK_LIMIT:
            return
        bonus = 1.0
        if user.is_legendary:
            bonus += config.BONUS_LEGENDARY
        elif user.is_veteran:
            bonus += config.BONUS_VETERAN
        to_add = int(500 * bonus)
        to_add = min(to_add, config.DAILY_JK_LIMIT - daily.earned_today)
        user.balance.jk_balance += to_add
        daily.earned_today += to_add
        await session.commit()
        await message.reply(f'–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {to_add} $JK –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!')
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ–Ω—É—Å–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª
        if user.referred_by:
            from db.models import Referral
            ref_result = await session.execute(select(Referral).filter_by(invited_id=user.id))
            ref = ref_result.scalar_one_or_none()
            if ref and not ref.bonus_given and daily.earned_today >= 20000:
                inviter_result = await session.execute(select(User).filter_by(id=user.referred_by))
                inviter = inviter_result.scalar_one_or_none()
                if inviter:
                    inviter.balance.jk_balance += 15000
                    user.balance.jk_balance += 15000
                    ref.bonus_given = True
                    await message.reply('–í—ã –∏ –≤–∞—à –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π –ø–æ–ª—É—á–∏–ª–∏ –ø–æ 15 000 $JK –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!')
                    await bot.send_message(inviter.telegram_id, f'–í–∞—à –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π @{user.username} —Å—Ç–∞–ª –∞–∫—Ç–∏–≤–Ω—ã–º! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 15 000 $JK.')
                await session.commit()

def get_user_by_telegram_id(session, telegram_id):
    return session.scalar(session.query(User).filter_by(telegram_id=str(telegram_id)))

@dp.message(F.reply_to_message, F.text.regexp(r'^[UQ][A-Za-z0-9_-]{47,63}$'))
async def save_ton_address(message: Message):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º TON-–∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with AsyncSessionLocal() as session:
        user_result = await session.execute(
            select(User).filter_by(telegram_id=str(message.from_user.id))
        )
        user = user_result.scalar_one_or_none()

        if not user:
            await message.reply('–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start!')
            return
        user.ton_address = message.text.strip()
        await session.commit()
        await message.reply('TON-–∞–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check_status.')

async def get_forbidden_words(session: AsyncSession) -> set:
    result = await session.execute(select(Setting).filter_by(key='forbidden_words'))
    setting = result.scalar_one_or_none()
    if setting is None or not setting.value:
        return set()
    return set(setting.value.split(','))

@dp.message.outer_middleware()
async def check_message_middleware(handler, event: Message, data):
    if not event.text or not event.from_user:
        return await handler(event, data)

    session: AsyncSession = data['session']
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_result = await session.execute(
        select(User).filter_by(telegram_id=str(event.from_user.id))
    )
    user = user_result.scalar_one_or_none()

    if user and user.banned:
        try:
            await event.delete()
        except Exception:
            pass # –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –ø—Ä–∞–≤
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    forbidden_words = await get_forbidden_words(session)
    if any(word in event.text.lower() for word in forbidden_words):
        try:
            await event.delete()
            # –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await event.bot.ban_chat_member(chat_id=event.chat.id, user_id=event.from_user.id)
            
            if not user:
                user = User(telegram_id=str(event.from_user.id), username=event.from_user.username, banned=True)
                session.add(user)
            else:
                user.banned = True
            
            await session.commit()
            await event.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{event.from_user.username} –∑–∞–±–∞–Ω–µ–Ω –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.")
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–∑–±–∞–Ω—É –≤ –õ–°
            try:
                await bot.send_message(
                    event.from_user.id,
                    f"–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞.\n\n–î–ª—è —Ä–∞–∑–±–∞–Ω–∞ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 2 000 000 $JK –Ω–∞ TON-–∫–æ—à–µ–ª–µ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: <code>{config.ADMIN_TON_ADDRESS}</code> –∏ –Ω–∞–ø–∏—à–∏—Ç–µ /unban –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã."
                )
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–º—É: {e}")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        return

    return await handler(event, data)

async def session_middleware(handler, event, data):
    async with AsyncSessionLocal() as session:
        data['session'] = session
        return await handler(event, data)

async def check_jk_unban_payment(ton_address: str, user_tg_id: str) -> bool:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –∞–¥—Ä–µ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ tonapi.io
    url = f'https://tonapi.io/v2/accounts/{config.ADMIN_TON_ADDRESS}/jettons/transfers'
    async with httpx.AsyncClient() as client:
        resp = await client.get(url)
        resp.raise_for_status()
        data = resp.json()
        for tx in data.get('transfers', []):
            if (
                tx.get('from_address') == ton_address and
                tx.get('jetton', {}).get('address') == config.JK_TOKEN_CONTRACT and
                int(tx.get('amount', 0)) >= 2_000_000
            ):
                return True
    return False

@dp.message(Command('unban'))
async def unban_handler(message: Message):
    async with AsyncSessionLocal() as session:
        user_result = await session.execute(
            select(User).filter_by(telegram_id=str(message.from_user.id))
        )
        user = user_result.scalar_one_or_none()
        if not user or not user.banned:
            await message.reply('–í—ã –Ω–µ –∑–∞–±–∞–Ω–µ–Ω—ã.')
            return
        if not user.ton_address:
            await message.reply('–£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω TON-–∞–¥—Ä–µ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
            return
        await message.reply('–ü—Ä–æ–≤–µ—Ä—è—é –æ–ø–ª–∞—Ç—É...')
        paid = await check_jk_unban_payment(user.ton_address, user.telegram_id)
        if paid:
            user.banned = False
            await session.commit()
            await message.reply('–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –í—ã —Ä–∞–∑–±–∞–Ω–µ–Ω—ã –∏ –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç–µ.')
        else:
            await message.reply('–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–µ—Ä–µ–≤–µ–ª–∏ 2 000 000 $JK –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.')

@dp.message(Command('send'))
async def send_jk_handler(message: Message):
    args = message.text.split()
    if len(args) != 3:
        await message.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /send [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] @username')
        return
    _, amount_str, recipient_username = args
    try:
        amount = int(amount_str)
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.reply('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.')
        return
    if not recipient_username.startswith('@'):
        await message.reply('–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ @username')
        return
    async with AsyncSessionLocal() as session:
        sender_result = await session.execute(select(User).filter_by(telegram_id=str(message.from_user.id)))
        sender = sender_result.scalar_one_or_none()
        recipient_result = await session.execute(select(User).filter_by(username=recipient_username.lstrip('@')))
        recipient = recipient_result.scalar_one_or_none()
        if not sender or not sender.ton_address:
            await message.reply('–£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω TON-–∞–¥—Ä–µ—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check_status.')
            return
        if not recipient or not recipient.ton_address:
            await message.reply('–£ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω TON-–∞–¥—Ä–µ—Å.')
            return
        if sender.telegram_id == recipient.telegram_id:
            await message.reply('–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å $JK —Å–∞–º–æ–º—É —Å–µ–±–µ.')
            return
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TON Connect-—Å—Å—ã–ª–∫—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ $JK
        link = get_ton_connect_link(recipient.ton_address, amount, Currency.JK)
        await message.reply(
            f'–î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ {amount} $JK –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{recipient.username} –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:\n'
            f'{link}\n\n'
            f'–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /confirm_send {amount} @{recipient.username}'
        )

@dp.message(Command('confirm_send'))
async def confirm_send_handler(message: Message):
    args = message.text.split()
    if len(args) != 3:
        await message.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /confirm_send [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] @username')
        return
    _, amount_str, recipient_username = args
    try:
        amount = int(amount_str)
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.reply('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.')
        return
    if not recipient_username.startswith('@'):
        await message.reply('–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ @username')
        return
    async with AsyncSessionLocal() as session:
        sender_result = await session.execute(select(User).filter_by(telegram_id=str(message.from_user.id)))
        sender = sender_result.scalar_one_or_none()
        recipient_result = await session.execute(select(User).filter_by(username=recipient_username.lstrip('@')))
        recipient = recipient_result.scalar_one_or_none()
        if not sender or not sender.ton_address:
            await message.reply('–£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω TON-–∞–¥—Ä–µ—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check_status.')
            return
        if not recipient or not recipient.ton_address:
            await message.reply('–£ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω TON-–∞–¥—Ä–µ—Å.')
            return
        from games.dice import check_payment
        paid = await check_payment(recipient.ton_address, sender.ton_address, amount, Currency.JK)
        if paid:
            await message.reply(f'–ü–µ—Ä–µ–≤–æ–¥ {amount} $JK –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{recipient.username} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!')
            await bot.send_message(recipient.telegram_id, f'–í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥ {amount} $JK –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{sender.username}!')
        else:
            await message.reply('–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ $JK –Ω–∞ TON-–∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.')

# --- FSM –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ $JK ---
class SendJKState(StatesGroup):
    waiting_for_amount = State()
    waiting_for_username = State()

# --- FSM –¥–ª—è –≤—ã–≤–æ–¥–∞ $JK ---
class WithdrawJKState(StatesGroup):
    waiting_for_amount = State()

# --- –í–ª–æ–∂–µ–Ω–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∏–≥—Ä ---
def get_games_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='üé≤ –ö–æ—Å—Ç–∏')],
            [KeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥')]
        ], resize_keyboard=True
    )

# --- –í–ª–æ–∂–µ–Ω–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ ---
def get_send_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='üí∏ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ $JK')],
            [KeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥')]
        ], resize_keyboard=True
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
@dp.message(lambda m: m.text in ['üí∞ –ë–∞–ª–∞–Ω—Å', 'üé≤ –ò–≥—Ä—ã', 'üí∏ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏', 'üèÜ NFT-—Å—Ç–∞—Ç—É—Å', 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'üîó –ö–æ—à–µ–ª—ë–∫', 'üì§ –í—ã–≤–æ–¥', '‚ÑπÔ∏è –ü–æ–º–æ—â—å'])
async def main_menu_handler(message: Message, state: FSMContext):
    if message.text == 'üí∞ –ë–∞–ª–∞–Ω—Å':
        await balance_handler(message, show_menu=True)
    elif message.text == 'üé≤ –ò–≥—Ä—ã':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:', reply_markup=get_games_menu())
    elif message.text == 'üí∏ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞:', reply_markup=get_send_menu())
    elif message.text == 'üèÜ NFT-—Å—Ç–∞—Ç—É—Å':
        await check_status_menu(message)
    elif message.text == 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã':
        await referral_menu(message)
    elif message.text == 'üîó –ö–æ—à–µ–ª—ë–∫':
        await connect_wallet_menu(message)
    elif message.text == 'üì§ –í—ã–≤–æ–¥':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ $JK:', reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥')]], resize_keyboard=True))
        await state.set_state(WithdrawJKState.waiting_for_amount)
    elif message.text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
        await message.answer('–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:\n/start ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–æ–º–∞–Ω–¥—ã\n–í–æ–ø—Ä–æ—Å—ã: @JKcoin_support', reply_markup=get_main_menu())
    elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=get_main_menu())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é –∏–≥—Ä ---
@dp.message(lambda m: m.text == 'üé≤ –ö–æ—Å—Ç–∏')
async def dice_menu_handler(message: Message):
    await message.answer('–î–ª—è –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/dice @username [amount] [currency]\n(–°–∫–æ—Ä–æ: –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏)', reply_markup=get_main_menu())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é –ø–µ—Ä–µ–≤–æ–¥–∞ ---
@dp.message(lambda m: m.text == 'üí∏ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ $JK')
async def send_jk_start(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ $JK:', reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥')]], resize_keyboard=True))
    await state.set_state(SendJKState.waiting_for_amount)

# --- FSM —à–∞–≥–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ $JK ---
@dp.message(SendJKState.waiting_for_amount)
async def send_jk_amount(message: Message, state: FSMContext):
    if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=get_main_menu())
        await state.clear()
        return
    try:
        amount = int(message.text.strip())
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.')
        return
    await state.update_data(amount=amount)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—É—á–∞—Ç–µ–ª—è:', reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥')]], resize_keyboard=True))
    await state.set_state(SendJKState.waiting_for_username)

@dp.message(SendJKState.waiting_for_username)
async def send_jk_username(message: Message, state: FSMContext):
    if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=get_main_menu())
        await state.clear()
        return
    username = message.text.strip().lstrip('@')
    data = await state.get_data()
    amount = data.get('amount')
    if not username:
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username.')
        return
    async with AsyncSessionLocal() as session:
        sender_result = await session.execute(select(User).filter_by(telegram_id=str(message.from_user.id)))
        sender = sender_result.scalar_one_or_none()
        recipient_result = await session.execute(select(User).filter_by(username=username))
        recipient = recipient_result.scalar_one_or_none()
        if not sender or not sender.ton_address:
            await message.reply('–£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω TON-–∞–¥—Ä–µ—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check_status.', reply_markup=get_main_menu())
            await state.clear()
            return
        if not recipient or not recipient.ton_address:
            await message.reply('–£ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω TON-–∞–¥—Ä–µ—Å.', reply_markup=get_main_menu())
            await state.clear()
            return
        if sender.telegram_id == recipient.telegram_id:
            await message.reply('–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å $JK —Å–∞–º–æ–º—É —Å–µ–±–µ.', reply_markup=get_main_menu())
            await state.clear()
            return
        link = get_ton_connect_link(recipient.ton_address, amount, Currency.JK)
        await message.reply(
            f'–î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ {amount} $JK –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{recipient.username} –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:\n'
            f'{link}\n\n'
            f'–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /confirm_send {amount} @{recipient.username}',
            reply_markup=get_main_menu()
        )
        await state.clear()

# --- FSM —à–∞–≥–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ $JK ---
@dp.message(WithdrawJKState.waiting_for_amount)
async def withdraw_jk_amount(message: Message, state: FSMContext):
    if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=get_main_menu())
        await state.clear()
        return
    try:
        amount = int(message.text.strip())
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞.')
        return
    async with AsyncSessionLocal() as session:
        user_result = await session.execute(select(User).options(selectinload(User.balance)).filter_by(telegram_id=str(message.from_user.id)))
        user = user_result.scalar_one_or_none()
        if not user or not user.balance:
            await message.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.', reply_markup=get_main_menu())
            await state.clear()
            return
        if amount > user.balance.jk_balance:
            await message.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.', reply_markup=get_main_menu())
            await state.clear()
            return
        is_veteran = user.is_veteran or user.is_legendary
        from config import get_game_commission, JEKARDOS_BANK_ADDRESS
        commission = 0.0 if is_veteran else get_game_commission()
        commission_amount = int(amount * commission)
        to_receive = amount - commission_amount
        link = get_ton_connect_link(user.ton_address, to_receive, Currency.JK)
        await message.reply(
            f'–ö –≤—ã–≤–æ–¥—É: {amount} $JK\n–ö–æ–º–∏—Å—Å–∏—è –±–æ—Ç–∞: {commission_amount} $JK\n–ò—Ç–æ–≥–æ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: {to_receive} $JK\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–≤–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ (TON Connect):\n{link}\n\n–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞–ø–∏—à–∏—Ç–µ /confirm_withdraw {amount}',
            reply_markup=get_main_menu()
        )
        await state.clear()

@dp.message(Command('referral'))
async def referral_handler(message: Message):
    async with AsyncSessionLocal() as session:
        user_result = await session.execute(select(User).filter_by(telegram_id=str(message.from_user.id)))
        user = user_result.scalar_one_or_none()
        if not user:
            await message.reply('–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start!')
            return
        ref_link = f'https://t.me/{(await bot.me()).username}?start=ref_{user.id}'
        await message.reply(
            f'–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n'
            f'{ref_link}\n\n'
            f'–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!'
        )

@dp.message(CommandStart(deep_link=True))
async def start_deep_link_handler(message: Message, command: CommandStart):
    payload = command.args
    if payload and payload.startswith('ref_'):
        inviter_id = int(payload[4:])
        async with AsyncSessionLocal() as session:
            user_result = await session.execute(select(User).filter_by(telegram_id=str(message.from_user.id)))
            user = user_result.scalar_one_or_none()
            if not user:
                user = User(telegram_id=str(message.from_user.id), username=message.from_user.username)
                session.add(user)
                await session.flush()
                if user.id is not None:
                    session.add(Balance(user_id=user.id, jk_balance=0))
                    session.add(DailyLimit(user_id=user.id, date=datetime.utcnow(), earned_today=0))
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª
            if user and not user.referred_by and user.id != inviter_id:
                user.referred_by = inviter_id
                from db.models import Referral
                session.add(Referral(inviter_id=inviter_id, invited_id=user.id, bonus_given=False))
            await session.commit()
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!')
    else:
        await start_handler(message)

TON_CONNECT_BACKEND = 'http://localhost:8080'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –≤–Ω–µ—à–Ω–∏–π –∞–¥—Ä–µ—Å –ø—Ä–∏ –¥–µ–ø–ª–æ–µ

@dp.callback_query(lambda c: c.data == 'wallet_connected')
async def wallet_connected_callback(callback: CallbackQuery):
    tg_id = callback.from_user.id
    url = f'{TON_CONNECT_BACKEND}/get_address?session_id={tg_id}'
    async with httpx.AsyncClient() as client:
        resp = await client.get(url)
        try:
            data = resp.json()
            address = data.get('address')
        except Exception:
            await callback.message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ –∏–∑ TON Connect. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.')
            return
    if address:
        async with AsyncSessionLocal() as session:
            user_result = await session.execute(select(User).filter_by(telegram_id=str(tg_id)))
            user = user_result.scalar_one_or_none()
            if user:
                user.ton_address = address
                await session.commit()
                await callback.message.answer(f'–í–∞—à TON-–∞–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω: {address}')
            else:
                await callback.message.answer('–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start!')
    else:
        await callback.message.answer('–ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫—É.')

@dp.callback_query(lambda c: c.data.startswith('accept_dice_'))
async def accept_dice_callback(callback: CallbackQuery):
    initiator_id = int(callback.data.split('_')[-1])
    async with AsyncSessionLocal() as session:
        game = await get_active_game_by_user(session, callback.from_user.id)
        if not game or game.initiator_id != initiator_id or game.opponent_id != callback.from_user.id:
            await callback.answer('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã.', show_alert=True)
            return
        if game.accepted:
            await callback.answer('–ò–≥—Ä–∞ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞.', show_alert=True)
            return
        game.accepted = True
        await session.commit()
        temp_wallet = generate_temp_wallet()
        game.temp_wallet = temp_wallet
        await session.commit()
        initiator_result = await session.execute(select(User).filter_by(telegram_id=str(game.initiator_id)))
        initiator = initiator_result.scalar_one_or_none()
        opponent_result = await session.execute(select(User).filter_by(telegram_id=str(game.opponent_id)))
        opponent = opponent_result.scalar_one_or_none()
        if not initiator or not opponent or not initiator.ton_address or not opponent.ton_address:
            await callback.message.edit_text('–û–±–∞ –∏–≥—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π TON-–∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ /check_status.')
            return
        link1 = get_ton_connect_link(temp_wallet, game.amount, Currency(game.currency))
        link2 = get_ton_connect_link(temp_wallet, game.amount, Currency(game.currency))
        await bot.send_message(game.initiator_id, f'–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {game.amount} {game.currency} –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ: {link1}')
        await bot.send_message(game.opponent_id, f'–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {game.amount} {game.currency} –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ: {link2}')
        await callback.message.edit_text('–û–∂–∏–¥–∞–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫ –æ—Ç –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.')
        for _ in range(30):
            paid1 = await check_payment(temp_wallet, initiator.ton_address, game.amount, Currency(game.currency))
            paid2 = await check_payment(temp_wallet, opponent.ton_address, game.amount, Currency(game.currency))
            if paid1:
                game.initiator_paid = True
            if paid2:
                game.opponent_paid = True
            await session.commit()
            if game.initiator_paid and game.opponent_paid:
                break
            await asyncio.sleep(2)
        if not (game.initiator_paid and game.opponent_paid):
            await bot.send_message(game.initiator_id, '–ù–µ –≤—Å–µ —Å—Ç–∞–≤–∫–∏ –ø–æ—Å—Ç—É–ø–∏–ª–∏ –≤–æ–≤—Ä–µ–º—è. –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.')
            await bot.send_message(game.opponent_id, '–ù–µ –≤—Å–µ —Å—Ç–∞–≤–∫–∏ –ø–æ—Å—Ç—É–ø–∏–ª–∏ –≤–æ–≤—Ä–µ–º—è. –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.')
            game.finished = True
            await session.commit()
            return
        import random
        winner_id = random.choice([game.initiator_id, game.opponent_id])
        game.winner_id = winner_id
        game.finished = True
        await session.commit()
        # –ö–æ–º–∏—Å—Å–∏—è
        winner = initiator if winner_id == game.initiator_id else opponent
        is_veteran = winner.is_veteran or winner.is_legendary
        from config import get_game_commission, ADMIN_TON_ADDRESS, JK_TOKEN_CONTRACT
        commission = 0.0 if is_veteran else get_game_commission()
        total_bank = game.amount * 2
        commission_amount = int(total_bank * commission)
        win_amount = total_bank - commission_amount
        # On-chain –≤—ã–ø–ª–∞—Ç–∞ –≤—ã–∏–≥—Ä—ã—à–∞
        try:
            if game.currency == 'TON':
                tx_hash = await send_ton(winner.ton_address, win_amount / 1e9, comment='–í—ã–∏–≥—Ä—ã—à –≤ –∏–≥—Ä–µ Dice')
                if commission_amount > 0:
                    await send_ton(ADMIN_TON_ADDRESS, commission_amount / 1e9, comment='–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –∏–≥—Ä—É Dice')
            else:
                tx_hash = await send_jetton(winner.ton_address, JK_TOKEN_CONTRACT, win_amount, comment='–í—ã–∏–≥—Ä—ã—à –≤ –∏–≥—Ä–µ Dice')
                if commission_amount > 0:
                    await send_jetton(ADMIN_TON_ADDRESS, JK_TOKEN_CONTRACT, commission_amount, comment='–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –∏–≥—Ä—É Dice')
            await bot.send_message(winner_id, f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount} {game.currency}. Tx: {tx_hash}')
        except Exception as e:
            await bot.send_message(winner_id, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—ã–∏–≥—Ä—ã—à–∞: {e}')
        await bot.send_message(game.initiator_id if winner_id != game.initiator_id else game.opponent_id, f'–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @{winner.username}')

@dp.message(Command('balance'))
async def balance_handler(message: Message, show_menu: bool = False):
    async with AsyncSessionLocal() as session:
        user_result = await session.execute(select(User).options(selectinload(User.balance)).filter_by(telegram_id=str(message.from_user.id)))
        user = user_result.scalar_one_or_none()
        if not user or not user.balance:
            await message.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.', reply_markup=get_main_menu() if show_menu else None)
            return
        username = user.username or f"id{user.telegram_id}"
        jk_balance = user.balance.jk_balance
        await message.reply(f'{username} : {jk_balance} $JK', reply_markup=get_main_menu() if show_menu else None)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message(lambda m: m.text in ['üí∞ –ë–∞–ª–∞–Ω—Å', 'üé≤ –ò–≥—Ä—ã', 'üí∏ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏', 'üèÜ NFT-—Å—Ç–∞—Ç—É—Å', 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'üîó –ö–æ—à–µ–ª—ë–∫', 'üì§ –í—ã–≤–æ–¥', '‚ÑπÔ∏è –ü–æ–º–æ—â—å'])
async def main_menu_handler(message: Message):
    if message.text == 'üí∞ –ë–∞–ª–∞–Ω—Å':
        await balance_handler(message, show_menu=True)
    elif message.text == 'üé≤ –ò–≥—Ä—ã':
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text='üé≤ –ö–æ—Å—Ç–∏'), KeyboardButton(text='ü™®‚úÇÔ∏èüìÑ –°–∫–æ—Ä–æ!')],
                [KeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥')]
            ], resize_keyboard=True
        )
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:', reply_markup=kb)
    elif message.text == 'üí∏ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏':
        await message.answer('–î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ $JK –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/send [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] @username', reply_markup=get_main_menu())
    elif message.text == 'üèÜ NFT-—Å—Ç–∞—Ç—É—Å':
        await check_status_menu(message)
    elif message.text == 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã':
        await referral_menu(message)
    elif message.text == 'üîó –ö–æ—à–µ–ª—ë–∫':
        await connect_wallet_menu(message)
    elif message.text == 'üì§ –í—ã–≤–æ–¥':
        await withdraw_menu(message)
    elif message.text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
        await message.answer('–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:\n/start ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–æ–º–∞–Ω–¥—ã\n–í–æ–ø—Ä–æ—Å—ã: @JKcoin_support', reply_markup=get_main_menu())
    elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=get_main_menu())

# –û–±–µ—Ä—Ç–∫–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥ —Å reply_markup –∏–∑ –º–µ–Ω—é
async def check_status_menu(message: Message):
    await check_status_handler(message)
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=get_main_menu())

async def referral_menu(message: Message):
    await referral_handler(message)
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=get_main_menu())

async def connect_wallet_menu(message: Message):
    await connect_wallet_handler(message)
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=get_main_menu())

async def withdraw_menu(message: Message):
    await message.answer('–î–ª—è –≤—ã–≤–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/withdraw', reply_markup=get_main_menu())

async def main():
    await init_db()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
    dp.update.outer_middleware.register(session_middleware)
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(admin_handlers.router)

    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main()) 